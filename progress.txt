Доступ в админ-панель
login: Admin_NewsPortal
password: NewsPortal
____________________________________________________________________________________________________________________
Добавляем в наши модели Post и Category "магический" метод __str__ в models.py;
Регистрируем наши модели в admin.py;
Для вывода списка новостей используем дженерик ListView и модель Post, для каждой отдельной новости DetailView
(при условии, что будет предоставлен целочисленный идентификатор объекта);
Создаём файл urls.py в директории нашего приложения;
В него импортируем наши представления и указываем путь к нашему списку;
Создаем шаблоны для списка новостей (news.html) и каждой отдельной новости (new.html);
Создаем папку templatetags и файл my_filter в ней, для хранения наших шаблонов.

По недочетам с прошлого задания:
исправил модель PostCategory (убрал связь "многие ко многим")
____________________________________________________________________________________________________________________
Изменения внесенные с модулем D7!!!

Добавляем пагинацию для вывода определенного количества записей на странице (изменили views)
Добавляем ссылки на страницы в шаблоне (news.html)
Добавляем django_filters и создаем файл filters.py в папке нашего приложения
Создаем класс с указанием, как фильтровать данные Post
Используем новый класс в представлении (views) для фильтрации списка новостей
Добавляем в (news) поля для объявленного фильтра, используя переменную из шаблона, и кнопку отправки формы
Создаем файл custom_tags.py в котором создаем тег, который позволит сохранять параметры фильтрации при переключении страниц
Применим наш тег в шаблоне (для каждой ссылки пагинации укажем обработку через новый тег)
Создаем файл forms.py и в нем форму для модели Post (в отличии от сгенерированой django-filter)
Он будет применятся для изменения в нашей БД (создание, изменение, удаление данных)
В шаблон добавляем тег {% csrf_token %}. Он помогает защитится от части недостатков протокола HTTP
Создаем новые представления для создания, поиска, редактирования и удаления статей; и регистрируем их

Не получилось реализовать:
неправильная реализация в urls.py (соответственно и браузере идут следующие ссылки:
    news/create;
    news/edit;
    news/delete;
    news/article/create;
    news/article/edit;
    news/article/delete;
Соответственно ссылки на создание работают некоректно (статья создается по умолчанию с типом "новость",
поменять можно только в админ-панели).
___________________________________________________________________________________________________________________
Изменения внесенные с модулем D8

Добавляем миксин LoginRequiredMixin в представления для добавления и редактирования статей и новостей.
Добавляем в settings.py адрес для перенаправления после авторизации.
Создаем и добавляем два новых приложения sign и protect, в urls.py перенаправляем корневой каталог в protect и
страницы с началом адреса sign в приложение sign.
В приложении protect создаем представление IndexView и прописываем его в protect/urls.py
В templates создаем папку protect и файл index.html
Создаем файлы для авторизации login.html, logout.html, signup.html
Создадим модель в приложении sign и напишем для нее представление
Устанавливаем сторонний пакет allauth
Вносим изменения в файл настроек, согласно документации пакета
Изменим форму регистрации, предоставляемую пакетом
Через админ-панель добавили группы
При регистрации пользователя добавляем его в группу 'common' автоматически
Добавили проверку прав доступа в классах-представлениях создания и редактирования постов
____________________________________________________________________________________________________________________
Исправлено представление по регистрации пользователей author на authors (для корректной работы с БД)

Изменения внесенные с модулем D9
Добавили поле subscribes в модель категории приложения news
Добавили изменения в settings.py (внесли возможность отправки писем с почты gmail)
Создали файл signals.py в котором храним функции по отправке почты пользователям
Также в конфиге apps.py переопределяем метод ready
Добавляем новое представление Categorylist
Устанавливаем пакет apscheduler
Вносим изменения в настройки settings.py
Создаем папку management/commands (для создания собственной команды manage.py)
И к сожалению получаем ошибку TypeError: "to" argument must be a list or tuple в 31 строке runapscheduler.py,
и исправить у меня не получается.

Устанавливаем пакет celery для отслеживания задач



